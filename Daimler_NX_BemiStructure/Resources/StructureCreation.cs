//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Projekte\Daimler_Bemi\DaimlerBemiStructure\DC_NX_Bemi\Daimler_NX_BemiStructure\Resources\StructureCreation.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: assmann
//              Version: NX 8.5
//              Date: 01-23-2014  (Format: mm-dd-yyyy)
//              Time: 11:48 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class StructureCreation
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.Group groupStructureOption;// Block type: Group
    private NXOpen.BlockStyler.Enumeration RadioBoxStructureOption;// Block type: Enumeration
    private NXOpen.BlockStyler.Label label01;// Block type: Label
    private NXOpen.BlockStyler.FolderSelection structurePathBrowser;// Block type: NativeFolderBrowser
    private NXOpen.BlockStyler.Group groupFile;// Block type: Group
    private NXOpen.BlockStyler.Toggle toggleUseExcelSession;// Block type: Toggle
    private NXOpen.BlockStyler.Label labelSaveBeforeValidation;// Block type: Label
    private NXOpen.BlockStyler.Button buttonOpenFile;// Block type: Button
    private NXOpen.BlockStyler.StringBlock fileName;// Block type: String
    private NXOpen.BlockStyler.Group groupImportOptions;// Block type: Group
    private NXOpen.BlockStyler.Toggle toggleAddPosNb;// Block type: Toggle
    private NXOpen.BlockStyler.Group groupValidation;// Block type: Group
    private NXOpen.BlockStyler.Button validationButton;// Block type: Button
    private NXOpen.BlockStyler.MultilineString multilineValResult;// Block type: Multiline String
    private NXOpen.BlockStyler.Group groupExport;// Block type: Group
    private NXOpen.BlockStyler.Label labelExportInfo;// Block type: Label
    private NXOpen.BlockStyler.Label labelExportInfo2;// Block type: Label
    private NXOpen.BlockStyler.Group groupEnhanceExStructure;// Block type: Group
    private NXOpen.BlockStyler.Label label0;// Block type: Label
    private NXOpen.BlockStyler.SelectObject componentSelection;// Block type: Selection
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public StructureCreation()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "StructureCreation.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
            theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            theDialog.AddEnableOKButtonHandler(new NXOpen.BlockStyler.BlockDialog.EnableOKButton(enableOKButton_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public static void Main()
    {
        StructureCreation theStructureCreation = null;
        try
        {
            theStructureCreation = new StructureCreation();
            theStructureCreation.Show();
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(theStructureCreation != null)
                theStructureCreation.Dispose();
                theStructureCreation = null;
        }
    }
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    public static void UnloadLibrary(string arg)
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            groupStructureOption = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("groupStructureOption");
            RadioBoxStructureOption = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("RadioBoxStructureOption");
            label01 = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("label01");
            structurePathBrowser = (NXOpen.BlockStyler.FolderSelection)theDialog.TopBlock.FindBlock("structurePathBrowser");
            groupFile = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("groupFile");
            toggleUseExcelSession = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("toggleUseExcelSession");
            labelSaveBeforeValidation = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("labelSaveBeforeValidation");
            buttonOpenFile = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("buttonOpenFile");
            fileName = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("fileName");
            groupImportOptions = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("groupImportOptions");
            toggleAddPosNb = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("toggleAddPosNb");
            groupValidation = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("groupValidation");
            validationButton = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("validationButton");
            multilineValResult = (NXOpen.BlockStyler.MultilineString)theDialog.TopBlock.FindBlock("multilineValResult");
            groupExport = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("groupExport");
            labelExportInfo = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("labelExportInfo");
            labelExportInfo2 = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("labelExportInfo2");
            groupEnhanceExStructure = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("groupEnhanceExStructure");
            label0 = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("label0");
            componentSelection = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("componentSelection");
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == RadioBoxStructureOption)
            {
            }
            else if(block == label01)
            {
            }
            else if(block == structurePathBrowser)
            {
            }
            else if(block == toggleUseExcelSession)
            {
            }
            else if(block == labelSaveBeforeValidation)
            {
            }
            else if(block == buttonOpenFile)
            {
            }
            else if(block == fileName)
            {
            }
            else if(block == toggleAddPosNb)
            {
            }
            else if(block == validationButton)
            {
            }
            else if(block == multilineValResult)
            {
            }
            else if(block == labelExportInfo)
            {
            }
            else if(block == labelExportInfo2)
            {
            }
            else if(block == label0)
            {
            }
            else if(block == componentSelection)
            {
            }
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
        }
        catch (Exception ex)
        {
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    public int cancel_cb()
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: filter_cb
    //------------------------------------------------------------------------------
    public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
    {
        return(NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: enableOKButton_cb
    //------------------------------------------------------------------------------
    public bool enableOKButton_cb()
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return true;
    }
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    
}
